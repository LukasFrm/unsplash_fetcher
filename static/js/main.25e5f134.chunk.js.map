{"version":3,"sources":["reducers/imageReducer.js","reducers/index.js","actions/types.js","store.js","actions/ImageActions.js","components/SubmitForm.js","components/ErrorModal.js","components/Images.js","components/PhotosTable.js","components/QueriesTable.js","App.js","serviceWorker.js","index.js"],"names":["initialState","savedPhotos","savedQueries","noQuery","noResults","loading","combineReducers","data","state","action","type","payload","store","createStore","rootReducer","compose","applyMiddleware","thunk","fetchPhotos","query","dispatch","multiQuery","replace","axios","get","process","then","res","results","console","log","length","toggleNoQuery","val","SubmitForm","props","onChange","e","setState","textInput","target","value","onSubmit","preventDefault","this","Form","className","Input","name","Button","color","onClick","Spinner","size","saveQuery","Component","connect","ErrorModal","Modal","isOpen","ModalBody","text","ModalFooter","close","map","item","key","id","src","urls","thumb","alt","PhotosTable","Fragment","indexOf","Math","random","toggleNoResults","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.25e5f134.chunk.js","sourcesContent":["import {\r\n  SAVE_QUERY,\r\n  FETCH_PHOTOS,\r\n  TOGGLE_QUERY_MODAL,\r\n  TOGGLE_RESULTS_MODAL,\r\n  QUERY_LOADING,\r\n} from '../actions/types'\r\n\r\nconst initialState = {\r\n  savedPhotos: [],\r\n  savedQueries: [],\r\n  noQuery: false,\r\n  noResults: false,\r\n  loading: false,\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SAVE_QUERY:\r\n      return {\r\n        ...state,\r\n        savedQueries: [...state.savedQueries, action.payload],\r\n      }\r\n    case FETCH_PHOTOS:\r\n      return {\r\n        ...state,\r\n        savedPhotos: [...action.payload],\r\n      }\r\n    case TOGGLE_QUERY_MODAL:\r\n      return {\r\n        ...state,\r\n        noQuery: action.payload,\r\n      }\r\n    case TOGGLE_RESULTS_MODAL:\r\n      return {\r\n        ...state,\r\n        noResults: action.payload,\r\n      }\r\n    case QUERY_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport imageReducer from './imageReducer'\r\n\r\nexport default combineReducers({\r\n  data: imageReducer,\r\n})\r\n","export const SAVE_QUERY = 'SAVE_QUERY'\r\nexport const FETCH_PHOTOS = 'FETCH_PHOTOS'\r\nexport const TOGGLE_QUERY_MODAL = 'TOGGLE_QUERY_MODAL'\r\nexport const TOGGLE_RESULTS_MODAL = 'TOGGLE_RESULTS_MODAL'\r\nexport const CLEAR_SEARCH = 'CLEAR_SEARCH'\r\nexport const QUERY_LOADING = 'QUERY_LOADING'\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  compose(applyMiddleware(thunk), null)\r\n)\r\n\r\nexport default store;","import {\r\n  SAVE_QUERY,\r\n  FETCH_PHOTOS,\r\n  QUERY_LOADING,\r\n  TOGGLE_QUERY_MODAL,\r\n  TOGGLE_RESULTS_MODAL,\r\n} from './types'\r\nimport axios from 'axios'\r\n\r\nexport const fetchPhotos = query => dispatch => {\r\n  let multiQuery = query.replace(/ /g, \"+\")\r\n  \r\n  dispatch({ type: QUERY_LOADING, payload: true })\r\n  axios\r\n    .get(\r\n      `https://api.unsplash.com/search/photos?page=1&query=${multiQuery}&client_id=${process.env.REACT_APP_ACCESSS_KEY}&per_page=30`,\r\n    )\r\n    .then(res => {\r\n      dispatch({\r\n        type: FETCH_PHOTOS,\r\n        payload: res.data.results,\r\n      })\r\n\r\n      console.log(res.data.results)\r\n\r\n      res.data.results.length === 0 &&\r\n        dispatch({ type: TOGGLE_RESULTS_MODAL, payload: true })\r\n\r\n      dispatch({ type: QUERY_LOADING, payload: false })\r\n    })\r\n}\r\n\r\nexport const saveQuery = val => dispatch => {\r\n  dispatch({ type: SAVE_QUERY, payload: val })\r\n}\r\n\r\nexport const toggleNoQuery = val => dispatch => {\r\n  dispatch({ type: TOGGLE_QUERY_MODAL, payload: val })\r\n}\r\n\r\nexport const toggleNoResults = val => dispatch => {\r\n  dispatch({ type: TOGGLE_RESULTS_MODAL, payload: val })\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Form, Input, Spinner } from 'reactstrap'\r\nimport { fetchPhotos, saveQuery, toggleNoQuery } from '../actions/ImageActions'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\n\r\nexport class SubmitForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      textInput: '',\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ textInput: e.target.value })\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault()\r\n    this.state.textInput === ''\r\n      ? this.props.toggleNoQuery(true)\r\n      : this.props.fetchPhotos(this.state.textInput)\r\n  }\r\n\r\n  render() {\r\n    const { loading } = this.props\r\n    const { textInput } = this.state\r\n\r\n    return (\r\n      <Form className=\"row\" onSubmit={e => this.onSubmit(e)}>\r\n        <div className=\"col-md-8 col-12\">\r\n          <Input\r\n            name=\"searchTerm\"\r\n            onChange={e => this.onChange(e)}\r\n            value={textInput}\r\n            className=\"mb-3\"\r\n          />\r\n        </div>\r\n        <div className=\"text-center px-auto col-md-4 col-12\">\r\n          <Button\r\n            type=\"button\"\r\n            color=\"warning\"\r\n            className=\"px-auto submitBtn\"\r\n            onClick={e => this.onSubmit(e)}\r\n          >\r\n            {loading ? (\r\n              <span>\r\n                <Spinner\r\n                  size=\"sm\"\r\n                  className=\"spinner-border spinner-border-sm\"\r\n                />\r\n              </span>\r\n            ) : (\r\n              'Search'\r\n            )}\r\n          </Button>\r\n          <Button\r\n            color=\"success\"\r\n            className=\"ml-3 px-auto saveBTn\"\r\n            onClick={() => this.props.saveQuery(textInput)}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nSubmitForm.propTypes = {\r\n  fetchPhotos: PropTypes.func.isRequired,\r\n  saveQuery: PropTypes.func.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    savedPhotos: state.data.savedPhotos,\r\n    loading: state.data.loading,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  fetchPhotos,\r\n  saveQuery,\r\n  toggleNoQuery,\r\n})(SubmitForm)\r\n","import React from 'react'\r\nimport { Button, Modal, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nfunction ErrorModal(props) {\r\n  return (\r\n    <Modal isOpen={props.isOpen}>\r\n      <ModalBody>{props.text}</ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"primary\" onClick={() => props.close()}>\r\n          OK\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ErrorModal\r\n\r\n\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Images(props) {\r\n  return (\r\n    <tr>\r\n      {props.savedPhotos.map(item => {\r\n        return (\r\n          <td key={item.id}>\r\n            <img src={item.urls.thumb} className=\"m-3\" alt=\"unsplash\" />\r\n          </td>\r\n        )\r\n      })}\r\n    </tr>\r\n  )\r\n}\r\n\r\nImages.propTypes = {\r\n  savedPhotos: PropTypes.array.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    savedPhotos: state.data.savedPhotos,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Images)\r\n","import React from 'react'\r\nimport Images from '../components/Images'\r\n\r\n\r\n\r\nfunction PhotosTable() {\r\n  return (\r\n    <table className=\"table col-md-8 col-12 text-center order-last order-md-first\">\r\n      <thead>\r\n        <tr>\r\n          <th>Photos</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <React.Fragment>\r\n          <Images />\r\n        </React.Fragment>\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default PhotosTable\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { fetchPhotos } from '../actions/ImageActions'\r\n\r\n\r\nfunction QueriesTable(props) {\r\n  return (\r\n    <table className=\"table ml-md-5 col-md-3 col-12 text-center order-first order-md-last\">\r\n      <thead>\r\n        <tr>\r\n          <th>Saved queries:</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.savedQueries.map(item => {\r\n          return (\r\n            <tr key={props.savedQueries.indexOf(item) + Math.random()}>\r\n              <td onClick={() => props.fetchPhotos(item)} className='savedQuery'>{item}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nQueriesTable.propTypes = {\r\n  savedQueries: PropTypes.array.isRequired,\r\n  fetchPhotos: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    savedQueries: state.data.savedQueries,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchPhotos })(QueriesTable)\r\n","import React from 'react'\nimport './styles/App.scss'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport SubmitForm from './components/SubmitForm'\nimport ErrorModal from './components/ErrorModal'\nimport PhotosTable from './components/PhotosTable'\nimport QueriesTable from './components/QueriesTable'\n\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { toggleNoQuery, toggleNoResults } from './actions/ImageActions'\n\nfunction App(props) {\n  return (\n    <div className=\"p-4\">\n      <ErrorModal\n        isOpen={props.noQuery}\n        text=\"Please enter a search query\"\n        close={() => props.toggleNoQuery(false)}\n      />\n      <ErrorModal\n        isOpen={props.noResults}\n        text=\"Unfortunately, no photos were found\"\n        close={() => props.toggleNoResults(false)}\n      />\n      <SubmitForm />\n      <div className=\"row mt-5 pl-0 pl-md-3\">\n        <PhotosTable />\n        <QueriesTable />\n      </div>\n    </div>\n  )\n}\nApp.propTypes = {\n  noQuery: PropTypes.bool.isRequired,\n  noResults: PropTypes.bool.isRequired,\n  toggleNoQuery: PropTypes.func.isRequired,\n  toggleNoResults: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => {\n  return {\n    noQuery: state.data.noQuery,\n    noResults: state.data.noResults,\n  }\n}\n\nexport default connect(mapStateToProps, { toggleNoQuery, toggleNoResults })(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}